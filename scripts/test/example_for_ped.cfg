# Example config file for the development cli, dev-cli.
# The format of this file is pretty straightforward, and documented at
# http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-Files

# WARNING! Floating point values _must_ be specified as (e.g.) 10.0 and not 10.
# If the decimal point is omitted, parsing may fail silently and use the value 0.

random_seed = 878638576;
num_labels = 2;

# The simulation model to run. The model definition must have a
# 'name' attribute and 'population_size' attribute, and may have
# other attributes.
model = {
    # The standard coalescent
    # name = "hudson",
    # population_size = 100.0;

    # The SMC and SMC' variant.
    # name = "smc",
    # name = "smc_prime",

    # The 'Dirac' multiple mergers coalescent
    # population_size = 1000.0;
    # name = "dirac",
    # psi = 0.99;
    # c = 0.1;

    # The 'Beta' multiple mergers coalescent
    #name = "beta";
    #alpha = 2.2;
    #truncation_point = 10.0;

    # The discrete time Wright Fisher
    name = "dtwf";
    population_size = 10.0;

    # The genic selction sweep model
    # name = "sweep_genic_selection";
    # population_size = 100.0;
    # position = 50; /* The site at which the sweep occurs */
    # start_frequency = 0.1;
    # end_frequency = 0.8;
    # alpha = 0.1;
    # dt = 0.01;
};

# The recombination parameters. num_loci is the number of discrete loci that
# we simulate. The recombination_map determines the coordinate space that
# we map these loci into and the rate of recombination within this coordinate
# space. The overall rate of recombination between loci is calculated using
# these rates, and the simulation works in this genetic coordinate space.
# Once the simulation is complete, we can then remap the genetic coordinates
# into physical coordinates.
#
num_loci = 100;
recombination_map = (
    # Each element in this array is a tuple (x, rate), where is the
    # start of a segment and rate is the recombination rate within that
    # until the next breakpoint. This specifies a rate of 0.1 along
    # the interval 0-100.
    [0.0, 0.1],
    [100.0, 0.0]
);

# The mutation rate per generation.
mutation_rate = 0.002;
# Alphabet used in infinite sites mutations. 0 for binary and 1 for ACGT
mutation_alphabet = 1;

# The samples. Each sample has a time and a population.
# samples  = (
#     { population = 0; time = 0.0; },
#     { population = 0; time = 0.0; },
#     { population = 0; time = 0.0; },
#     { population = 0; time = 0.0; }
    # { population = 0; time = 0.0; },
    # { population = 0; time = 0.0; },
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # { population = 0; time = 0.0; }
# );

# The tree sequence file to initialise the simulation when recapitating.
/* from = "./tmp.trees"; */

########################
# Population structure.
########################

# The number and initial state of the populations is specified in the
# following group. We must specify a growth_rate and initial_size for
# each population. These parameters may not be relevant for all simulation
# models.
population_configuration = (
    {
        growth_rate = 0.0;
        initial_size = 1.0;
    }
);
# The flattened migration matrix. Diagonal entries must be 0. For example,
# for a three population symmetric system we might have
#migration_matrix = [0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0];
migration_matrix = [0.0];

# The flattened pedigree array.  Each element in this array is a tuple (ind_ID,
# father_ix, mother_ix, time, sample_flag), where parent indices denote the row
# of the corresponding individual. Unknown individuals are denoted by an index
# of -1.
# pedigree = [
#             10,  2,  3, 0, 1,
#             11,  2,  3, 0, 1,
#             20, -1, -1, 1, 0,
#             21, -1, -1, 1, 0
# ];
# pedigree = [
# 		 1,   3,   4,   0,   0,
#          2,   7,   6,   0,   0,
#          3,   7,   6,   0,   0,
#         11,  14,  13,   0,   0,
#         12,  -1,  -1,   0,   0,
#         13,  14,  13,   0,   1,
#         14,  -1,  -1,   0,   0,
#         15,  15,  16,   0,   0,
#         16,  15,  16,   0,   1,
#         18,  17,  18,   0,   0,
#         19,  17,  18,   0,   0,
#         20,  19,  20,   0,   0,
#         21,  19,  20,   0,   0,
#        101,  -1,  -1,   0,   0,
#        102,  22,  21,   0,   0,
#        103,  -1,  -1,   1,   0,
#        104,  22,  21,   1,   0,
#        105,  22,  21,   1,   0,
#        106,  -1,  -1,   1,   0,
#        107,  22,  21,   0,   0,
#        108,  -1,  -1,   0,   0,
#        201,  -1,  -1,   2,   0,
#        202,  -1,  -1,   2,   0
# ];

# All supported demographic events are supported in the following list.
# Some examples:
#
#    {
#        type = "population_parameters_change",
#        time = 0.2;
#        population_id = 1;
#        growth_rate = 3.0;
#    }
#
#    {
#        type = "migration_rate_change";
#        time = 0.3;
#        matrix_index = -1;
#        migration_rate = 0.0;
#    }
#
#    {
#        type = "mass_migration";
#        time = 0.3;
#        source = 1;
#        dest = 0;
#        proportion = 1.0;
#    }
# These examples are not complete, but should be sufficient to get started.
# Please see the source of dev-cli.c for details on these events.

demographic_events = ();

########################
# Miscellaneous options
########################

# The remaining configuration items are low-level performance tuning levers.
# The should have no impact on the outcome of the simulation.

# Set to 1 if migration records should be stored.
store_migrations = 0;

# Set to 1 to store the full ARG. This keeps track of all 
# recombination and common ancestor nodes, as well as migration events.
store_full_arg = 0;

# Number of items that we allocate at once for each type.
avl_node_block_size = 1000;
node_mapping_block_size = 1000;
segment_block_size = 1000;
